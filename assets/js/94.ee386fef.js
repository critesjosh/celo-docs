(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{443:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"using-web3-with-contractkit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-web3-with-contractkit"}},[e._v("#")]),e._v(" Using Web3 with ContractKit")]),e._v(" "),a("p",[e._v("Although the "),a("a",{attrs:{href:"https://web3js.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web3 library"),a("OutboundLink")],1),e._v(" was intended to be used only with "),a("code",[e._v("Ethereum")]),e._v(", due to the nature of "),a("code",[e._v("Celo")]),e._v(", we can still use the majority of its features.\nThe ContractKit, for every interaction with the node, uses internally a Web3 instance.")]),e._v(" "),a("p",[e._v("Because of this, the "),a("code",[e._v("Ethereum")]),e._v(" JSON-RPC calls done via the web3 (except some specific calls that we will explain in this page) are also supported")]),e._v(" "),a("p",[e._v("For example:")]),e._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" web3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" kit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("web3\n\nweb3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("eth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getBalance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("someAddress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" web3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" kit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("web3\n\nweb3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("eth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"latest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("p",[e._v("will work the same way")]),e._v(" "),a("h2",{attrs:{id:"web3-limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web3-limitations"}},[e._v("#")]),e._v(" Web3 limitations")]),e._v(" "),a("p",[e._v("As you have read in our guide, Celo uses some extra fields: "),a("code",[e._v("feeCurrency")]),e._v(", "),a("code",[e._v("gatewayFeeRecipient")]),e._v(" and "),a("code",[e._v("gatewayFee")]),e._v(", that among other things allows you yo pay gas with ERC20 Tokens. These fields are expected by the node.")]),e._v(" "),a("p",[e._v("To facilitate the life of every developer, we decided to wrap the "),a("code",[e._v("Provider")]),e._v(" set in the "),a("code",[e._v("Web3")]),e._v(" instance, and add our way to handle local signing using these new fields. Similar to what "),a("em",[e._v("Metamask")]),e._v(" does, we intercept every transaction and perform a local signing when required. This wrapper is called "),a("code",[e._v("CeloProvider")]),e._v(".")]),e._v(" "),a("p",[e._v("This let you use the Web3 instance to interact with node's Json RPC API in a transparent way, just deciding which Provider do you need.")]),e._v(" "),a("p",[e._v("This is also the reason that the "),a("code",[e._v("Kit")]),e._v(" requires a valid provider from the beginning")]),e._v(" "),a("h2",{attrs:{id:"local-signing-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#local-signing-problem"}},[e._v("#")]),e._v(" Local Signing Problem")]),e._v(" "),a("p",[a("code",[e._v("Web3")]),e._v(" provides an alternative way to locally sign transactions which is the usage of "),a("code",[e._v("web3.eth.accounts.signTransaction")]),e._v(" module to register local accounts, but since Celo transactions are different to the Ethereum ones, this does not work with Celo, hence "),a("strong",[e._v("you must not use it")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);