(window.webpackJsonp=window.webpackJsonp||[]).push([[371],{718:function(e,t,a){"use strict";a.r(t);var s=a(42),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"attestation-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attestation-service"}},[e._v("#")]),e._v(" Attestation Service")]),e._v(" "),a("p",[e._v("Celo Validators are strongly encouraged to operate an "),a("a",{attrs:{href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/attestation-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("Attestation Service"),a("OutboundLink")],1),e._v(" instance.  If you are a recipient of or considering applying to receive "),a("RouterLink",{attrs:{to:"/docs/operations-manual/celo-foundation-voting-policy.html"}},[e._v("votes from the Celo Foundation")]),e._v(", running a reliable Attestation Service is a requirement for eligibility.")],1),e._v(" "),a("p",[e._v("The Attestation Service is part of the "),a("RouterLink",{attrs:{to:"/docs/celo-codebase/protocol/identity/"}},[e._v("Celo identity protocol")]),e._v(". It sends SMS on behalf of users to allow them to attest to having access to a phone number and to map that to a Celo account, securely and privately. This is shown as Steps 3 and 4 in this diagram:")],1),e._v(" "),a("p",[a("img",{attrs:{src:"https://storage.googleapis.com/celo-website/docs/attestations-flow.jpg",alt:""}})]),e._v(" "),a("p",[e._v("Validators receive a fee (set by "),a("RouterLink",{attrs:{to:"/docs/celo-holder-guide/voting-governance.html"}},[e._v("on-chain governance")]),e._v(", currently 0.05 cUSD) for every attestation that they process and that is then successfully redeemed on-chain by the user. In a future release, the Attestation Service will automatically claim and withdraw this fee.")],1),e._v(" "),a("h2",{attrs:{id:"outline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outline"}},[e._v("#")]),e._v(" Outline")]),e._v(" "),a("p",[e._v("This guide steps you through setting up an Attestation Service:")]),e._v(" "),a("ul",[a("li",[e._v("Follow the instructions to set up a validator on "),a("RouterLink",{attrs:{to:"/docs/getting-started/running-a-validator-in-mainnet.html"}},[e._v("mainnet")]),e._v(" or "),a("RouterLink",{attrs:{to:"/docs/getting-started/running-a-validator-in-baklava.html"}},[e._v("baklava")]),e._v(".")],1),e._v(" "),a("li",[e._v("Configure Twilio and Nexmo, the two SMS providers used by Attestation Service")]),e._v(" "),a("li",[e._v("Generate and register an attestation signer key")]),e._v(" "),a("li",[e._v("Deploy a Celo full node, with the attestation signer key unlocked")]),e._v(" "),a("li",[e._v("Deploy the attestation service")]),e._v(" "),a("li",[e._v("Configure and publish validator metadata so that clients can find your attestation service")]),e._v(" "),a("li",[e._v("Configure monitoring for the full node and attestation service")])]),e._v(" "),a("h2",{attrs:{id:"recent-releases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recent-releases"}},[e._v("#")]),e._v(" Recent releases")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/celo-org/celo-monorepo/releases/tag/attestation-service-1-0-4",target:"_blank",rel:"noopener noreferrer"}},[e._v("Attestation Service v1.0.4"),a("OutboundLink")],1),e._v(" (most recent release)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/celo-org/celo-monorepo/releases/tag/attestation-service-1-0-3",target:"_blank",rel:"noopener noreferrer"}},[e._v("Attestation Service v1.0.3"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"network-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network-configuration"}},[e._v("#")]),e._v(" Network configuration")]),e._v(" "),a("p",[e._v("Attestation Service needs to expose a HTTP or HTTPS endpoint to the public Internet. This means it should not be deployed on the same physical host as a Validator, which should be firewalled to allow incoming connections only from its proxy.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("PORT")]),e._v(" environment variable sets the listening port for the service on the local instance. Note that depending on your setup, this may be different from the port exposed to the public Internet.")]),e._v(" "),a("p",[e._v("Attestation Service exposes a HTTP endpoint, but it is strongly recommended that you adopt a setup that implements TLS.")]),e._v(" "),a("p",[e._v("An Attestation Service is usually deployed alongside a Celo full node instance, which needs to have the attestation signer key unlocked. This can be either deployed on the same physical machine, or in a VM or container on a different host. It is possible but not recommended to use a proxy node as the associated full node, but in this case ensure RPC access is locked down only to the Attestation Service.")]),e._v(" "),a("p",[e._v("Attestation Service currently does not support setups where multiple instances reside behind a load balancer. This will be addressed in a future release.")]),e._v(" "),a("h2",{attrs:{id:"sms-providers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sms-providers"}},[e._v("#")]),e._v(" SMS Providers")]),e._v(" "),a("p",[e._v("Currently the Attestation Service supports two SMS providers: "),a("a",{attrs:{href:"https://www.twilio.com/try-twilio",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twilio"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://dashboard.nexmo.com/sign-up",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexmo"),a("OutboundLink")],1),e._v(". It is strongly recommended that you sign up with both.")]),e._v(" "),a("h3",{attrs:{id:"twilio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#twilio"}},[e._v("#")]),e._v(" Twilio")]),e._v(" "),a("p",[e._v("After you sign up for Twilio at "),a("a",{attrs:{href:"https://www.twilio.com/try-twilio",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.twilio.com/try-twilio"),a("OutboundLink")],1),e._v(", you should see your "),a("code",[e._v("ACCOUNT SID")]),e._v(" and your "),a("code",[e._v("AUTH_TOKEN")]),e._v(" in the top right of the console. You'll also want to enter in a credit card to fund the account. For most text messages, the costs are typically very low (and significantly lower than the attestation fee paid by the user). Find a more comprehensive price list at "),a("a",{attrs:{href:"https://www.twilio.com/sms/pricing",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.twilio.com/sms/pricing"),a("OutboundLink")],1),e._v(". If there are countries that you do not want to serve, you can specify them with the "),a("code",[e._v("TWILIO_UNSUPPORTED_REGIONS")]),e._v(" configuration option.")]),e._v(" "),a("p",[e._v("Next, adjust the Geo settings to serve phone numbers globally under "),a("a",{attrs:{href:"https://www.twilio.com/console/sms/settings/geo-permissions",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.twilio.com/console/sms/settings/geo-permissions"),a("OutboundLink")],1),e._v(". Otherwise, the service will not be able to send SMS to Celo's global user base and your validator will negatively impact the Celo user experience.")]),e._v(" "),a("p",[e._v("To actually be able to send SMS, you need to create a messaging service under "),a("a",{attrs:{href:"https://www.twilio.com/console/sms/services",target:"_blank",rel:"noopener noreferrer"}},[e._v("Programmable SMS > SMS"),a("OutboundLink")],1),e._v(". Provide the resulting "),a("code",[e._v("SID")]),e._v(" in the "),a("code",[e._v("TWILIO_MESSAGING_SERVICE_SID")]),e._v(" configuration variable.")]),e._v(" "),a("p",[e._v("Now that you have provisioned your messaging service, you need to buy at least 1 phone number to send SMS from. You can do so under the "),a("code",[e._v("Numbers")]),e._v(" option of the messaging service page. It is strongly recommended that you purchase at least a US ("),a("code",[e._v("+1")]),e._v(") number which seem to provide high delivery success rates.  If you purchase numbers in other locales, Twilio will intelligently select the best number to send each SMS.")]),e._v(" "),a("h3",{attrs:{id:"nexmo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexmo"}},[e._v("#")]),e._v(" Nexmo")]),e._v(" "),a("p",[e._v("After signing up for "),a("a",{attrs:{href:"https://dashboard.nexmo.com/sign-up",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexmo"),a("OutboundLink")],1),e._v(", click the balance in the top-left to go to "),a("a",{attrs:{href:"https://dashboard.nexmo.com/billing-and-payments",target:"_blank",rel:"noopener noreferrer"}},[e._v("Billing and Payments"),a("OutboundLink")],1),e._v(", where you can add funds. It is strongly recommended that you use a credit or debit card (as opposed to other forms of payment) as you will then be able to enable "),a("code",[e._v("Auto reload")]),e._v(". You should also enable "),a("code",[e._v("Low balance alerts")]),e._v(". Both of these will help avoid failing to deliver SMS when your funds are exhausted. It appears that these options may not be immediately available for all new accounts due to fraud checks: try sending a few SMS, checking back after a few days, or raising a support ticket.")]),e._v(" "),a("p",[e._v("Under "),a("a",{attrs:{href:"https://dashboard.nexmo.com/your-numbers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Your Numbers"),a("OutboundLink")],1),e._v(", create a US number and ensure that is enabled for SMS. Note that Nexmo numbers appear to have a rate limit of 250 SMS per day.")]),e._v(" "),a("p",[e._v("If you want to support a single Attestation Service from this account, under "),a("a",{attrs:{href:"https://dashboard.nexmo.com/settings",target:"_blank",rel:"noopener noreferrer"}},[e._v("Settings"),a("OutboundLink")],1),e._v(", copy the API key into the environment variable "),a("code",[e._v("NEXMO_KEY")]),e._v(", and API secret into "),a("code",[e._v("NEXMO_SECRET")]),e._v(". (You'll come back to this page later to fill in the "),a("code",[e._v("Delivery Receipts")]),e._v(" setting).")]),e._v(" "),a("p",[e._v("If you want to support multiple Attestation Services from this account, for example for a setup where you have multiple validators and one service for each validator, or validators in different environments using the same account, you will need to create and configure a "),a("a",{attrs:{href:"https://dashboard.nexmo.com/applications/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexmo application"),a("OutboundLink")],1),e._v(" for each one. In each application, enable messaging (labeled as "),a("code",[e._v("Communicate with WhatsApp, Facebook Messenger, MMS and Viber")]),e._v(") and assign a number. You will need a separate number for each application.  Finally, copy each application's "),a("code",[e._v("Application Id")]),e._v(" value into the appropriate instance's "),a("code",[e._v("NEXMO_APPLICATION")]),e._v(" configuration value.")]),e._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("p",[e._v("This section uses several environment variables defined during the validator setup. You'll need to export "),a("code",[e._v("CELO_IMAGE")]),e._v(", "),a("code",[e._v("NETWORK_ID")]),e._v(" and "),a("code",[e._v("CELO_VALIDATOR_RG_ADDRESS")]),e._v(" on this machine.")]),e._v(" "),a("p",[e._v("Setting up an Attestation Service first requires an "),a("RouterLink",{attrs:{to:"/docs/operations-manual/key-management/detailed.html#authorized-attestation-signers"}},[e._v("Attestation Signer key")]),e._v(" to be registered (Similar to Validator and Vote signer keys). For that let's start our node on the Attestations machine (keep track of the password you use for this account):")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On the Attestation machine")]),e._v("\ndocker run -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo --rm -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" init /celo/genesis.json\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BOOTNODE_ENODES")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("docker run --rm --entrypoint "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" $CELO_IMAGE /celo/bootnodes"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v("\ndocker run -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo --rm -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" account new\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CELO_ATTESTATION_SIGNER_ADDRESS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YOUR-ATTESTATION-SIGNER-ADDRESS"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("Let's generate the proof-of-possession for the attestation signer:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On the Attestation machine")]),e._v("\ndocker run -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo --rm -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" account proof-of-possession "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_VALIDATOR_RG_ADDRESS")]),e._v("\n")])])]),a("p",[e._v("With this proof, authorize the attestation signer on your local machine:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On your local machine")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CELO_ATTESTATION_SIGNER_SIGNATURE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("ATTESTATION-SIGNER-SIGNATURE"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CELO_ATTESTATION_SIGNER_ADDRESS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YOUR-ATTESTATION-SIGNER-ADDRESS"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\ncelocli releasegold:authorize --contract "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_VALIDATOR_RG_ADDRESS")]),e._v(" --role attestation --signature 0x"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SIGNER_SIGNATURE")]),e._v(" --signer "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v("\n")])])]),a("p",[e._v("You can now run the node for the attestation service in the background. In the below command remember to specify the password you used during the creation of the "),a("code",[e._v("CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On the Attestation machine")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("CELO-ATTESTATION-SIGNER-PASSWORD"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" .password\ndocker run --name celo-attestations -it --restart always -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:8545:8545 -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" --verbosity "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" --networkid "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$NETWORK_ID")]),e._v(" --syncmode full --rpc --rpcaddr "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v(".0.0 --rpcapi eth,net,web3,debug,admin --unlock "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v(" --password /root/.celo/.password --bootnodes "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$BOOTNODE_ENODES")]),e._v(" --allow-insecure-unlock\n")])])]),a("h3",{attrs:{id:"database-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#database-configuration"}},[e._v("#")]),e._v(" Database Configuration")]),e._v(" "),a("p",[e._v("For storing and retrieving the attestation requests the service needs a database to persist that information. Currently "),a("code",[e._v("sqlite")]),e._v(", "),a("code",[e._v("postgres")]),e._v(" and "),a("code",[e._v("mysql")]),e._v(" are supported. For testing purposes you can use "),a("code",[e._v("sqlite")]),e._v(" but it's recommended to run a stand-alone database server using "),a("code",[e._v("mysql")]),e._v(" or "),a("code",[e._v("postgres")]),e._v(" if your intention is running the Attestation Service in a production environment. If you are running on a popular cloud provider, consider using their hosted SQL services.")]),e._v(" "),a("p",[e._v("Depending on your database technology you need to create a database with the access for a specific user and password.")]),e._v(" "),a("p",[e._v("For specifying the database url you need to setup the "),a("code",[e._v("DATABASE_URL")]),e._v(" variable in one of these ways:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On the Attestation machine")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DATABASE_URL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sqlite://db/attestation.db"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DATABASE_URL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"mysql://user:password@mysql.example.com:3306/attestation-service"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DATABASE_URL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"postgres://user:password@postgres.example.com:5432/attestation-service"')]),e._v("\n")])])]),a("p",[a("strong",[e._v("Example of setting up a local postgres database on Ubuntu")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" postgresql\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" -u postgres createdb attestation-service\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" -u postgres psql -c "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"ALTER USER postgres PASSWORD '<DATABASE_PASSWORD>';\"")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DATABASE_URL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"postgres://postgres:<DATABASE_PASSWORD>@localhost:5432/attestation-service"')]),e._v("\n")])])]),a("h2",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("Attestation Service can use its config from a file that can be specified using "),a("code",[e._v("CONFIG")]),e._v(" environment variable. It is recommended that you start using the "),a("a",{attrs:{href:"https://github.com/celo-org/celo-monorepo/blob/master/packages/attestation-service/config/.env.development",target:"_blank",rel:"noopener noreferrer"}},[e._v("template Attestation Service config file"),a("OutboundLink")],1),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Choose a location for the config and fetch the defaults")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CONFIG")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/path/to/attestation-service-config\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://raw.githubusercontent.com/celo-org/celo-monorepo/master/packages/attestation-service/config/.env.development "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CONFIG")]),e._v("\n")])])]),a("p",[e._v("Lines beginning "),a("code",[e._v("#")]),e._v(" are treated as comments. In addition, any options specified as environment variables override values provided in this file.")]),e._v(" "),a("p",[e._v("Required options:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Variable")]),e._v(" "),a("th")])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("DATABASE_URL")])]),e._v(" "),a("td",[e._v("The URL to access the local database, e.g. "),a("code",[e._v("sqlite://db/attestations.db")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("CELO_PROVIDER")])]),e._v(" "),a("td",[e._v("The node URL for your local full node at which your attestation signer key is unlocked. e.g. "),a("code",[e._v("http://localhost:8545")]),e._v(". Do not expose this port to the public internet!")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("CELO_VALIDATOR_ADDRESS")])]),e._v(" "),a("td",[e._v("Address of the Validator account. If Validator is deployed via a "),a("code",[e._v("ReleaseGold")]),e._v(" contract, this is the contract's address (i.e. "),a("code",[e._v("$CELO_VALIDATOR_RG_ADDRESS")]),e._v("), not the beneficiary.")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("ATTESTATION_SIGNER_ADDRESS")])]),e._v(" "),a("td",[e._v("Address of the Validator's attestation signer key")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("SMS_PROVIDERS")])]),e._v(" "),a("td",[e._v("Comma-separated list of all enabled SMS providers, by order of preference. Can include "),a("code",[e._v("twilio")]),e._v(", "),a("code",[e._v("nexmo")])])])])]),e._v(" "),a("p",[e._v("Optional environment variables:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Variable")]),e._v(" "),a("th",[e._v("Explanation")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("PORT")])]),e._v(" "),a("td",[e._v("Port to listen on. Default "),a("code",[e._v("3000")]),e._v(".")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("SMS_PROVIDERS_<country>")])]),e._v(" "),a("td",[e._v("Override to set SMS providers and order for a specific country code (e.g "),a("code",[e._v("SMS_PROVIDERS_MX=nexmo,twilio")]),e._v(")")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("MAX_PROVIDER_RETRIES")])]),e._v(" "),a("td",[e._v("Number of retries (after first) when sending SMS before considering next provider Default "),a("code",[e._v("3")]),e._v(".")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("EXTERNAL_CALLBACK_HOSTPORT")])]),e._v(" "),a("td",[e._v("Provide the full external URL at which the service can be reached, usually the same as the value of the "),a("code",[e._v("ATTESTATION_SERVICE_URL")]),e._v(" claim in your metadata. This value, plus a suffix e.g. "),a("code",[e._v("/delivery_status_twilio")]),e._v(" will be the URL at which service can receive delivery receipt callbacks. If this value is not set, and "),a("code",[e._v("VERIFY_CONFIG_ON_STARTUP=1")]),e._v(" (the default), the URL will be taken from the validator metadata. Otherwise, it must be supplied.")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("TIMEOUT_CLEANUP_NO_RECEIPT_MIN")])]),e._v(" "),a("td",[e._v("If a delivery report appears to be supported but is not received within this number of minutes, assume delivery success")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("VERIFY_CONFIG_ON_STARTUP")])]),e._v(" "),a("td",[e._v("Refuse to start if signer or metadata is misconfigured. Default "),a("code",[e._v("1")]),e._v(". If you disable this, you must specify "),a("code",[e._v("EXTERNAL_CALLBACK_HOSTPORT")]),e._v(".")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("LOG_LEVEL")])]),e._v(" "),a("td",[e._v("One of "),a("code",[e._v("fatal")]),e._v(", "),a("code",[e._v("error")]),e._v(", "),a("code",[e._v("warn")]),e._v(", "),a("code",[e._v("info")]),e._v(", "),a("code",[e._v("debug")]),e._v(", "),a("code",[e._v("trace")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("LOG_FORMAT")])]),e._v(" "),a("td",[e._v("One of "),a("code",[e._v("json")]),e._v(", "),a("code",[e._v("human")]),e._v(", "),a("code",[e._v("stackdriver")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("APP_SIGNATURE")])]),e._v(" "),a("td",[e._v("A value that is shown under the key "),a("code",[e._v("appSignature")]),e._v(" field in the "),a("code",[e._v("/status")]),e._v(" endpoint that you can use to identify multiple instances.")])])])]),e._v(" "),a("p",[e._v("Twilio configuration options:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Variable")]),e._v(" "),a("th",[e._v("Explanation")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("TWILIO_ACCOUNT_SID")])]),e._v(" "),a("td",[e._v("The Twilio account ID")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("TWILIO_MESSAGING_SERVICE_SID")])]),e._v(" "),a("td",[e._v("The Twilio Message Service ID. Starts with "),a("code",[e._v("MG")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("TWILIO_AUTH_TOKEN")])]),e._v(" "),a("td",[e._v("The API authentication token")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("TWILIO_UNSUPPORTED_REGIONS")])]),e._v(" "),a("td",[e._v("Optional. A comma-separated list of country codes to not serve, e.g "),a("code",[e._v("US,MX")])])])])]),e._v(" "),a("p",[e._v("Nexmo configuration options:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Variable")]),e._v(" "),a("th",[e._v("Explanation")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("NEXMO_KEY")])]),e._v(" "),a("td",[e._v("The API key to the Nexmo API")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("NEXMO_SECRET")])]),e._v(" "),a("td",[e._v("The API secret to the Nexmo API")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("NEXMO_APPLICATION")])]),e._v(" "),a("td",[e._v("If using a Nexmo application, the application id.")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("NEXMO_UNSUPPORTED_REGIONS")])]),e._v(" "),a("td",[e._v("Optional. A comma-separated list of country codes to not serve, e.g "),a("code",[e._v("US,MX")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("NEXMO_ACCOUNT_BALANCE_METRIC")])]),e._v(" "),a("td",[e._v("Optional. Disabled by default. If set to "),a("code",[e._v("1")]),e._v(", Nexmo balances will be published under the "),a("code",[e._v("attestation_provider_balance")]),e._v(" metric.")])])])]),e._v(" "),a("h2",{attrs:{id:"running-the-attestation-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-the-attestation-service"}},[e._v("#")]),e._v(" Running the Attestation Service")]),e._v(" "),a("p",[e._v("Before running the attestation service, ensure that your local node is fully synced.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On the Attestation machine")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" celocli node:synced --node geth.ipc\n")])])]),a("p",[e._v("The following command for running the Attestation Service uses "),a("code",[e._v("--network host")]),e._v(" to access a local database (only works on Linux), and listens for connections on port 80.")]),e._v(" "),a("p",[e._v("It assumes all of the configuration options needed have been added to the config file located under "),a("code",[e._v("$CONFIG")]),e._v(" which Docker will process. Alternatively, you can pass the config file for the service to read on startup using "),a("code",[e._v("-e CONFIG=<docker-path-to-config-file>")]),e._v(", and other environment variables directly by adding arguments of the form "),a("code",[e._v("-e DATABASE_URL=$DATABASE_URL")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On the Attestation machine")]),e._v("\ndocker run --name celo-attestation-service -it --restart always --entrypoint /bin/bash --network "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" --env-file "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CONFIG")]),e._v(" -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PORT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(" -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(":80 us.gcr.io/celo-testnet/celo-monorepo:attestation-service-1-0-4 -c "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('" cd /celo-monorepo/packages/attestation-service && yarn run db:migrate && yarn start "')]),e._v("\n")])])]),a("h3",{attrs:{id:"registering-metadata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registering-metadata"}},[e._v("#")]),e._v(" Registering Metadata")]),e._v(" "),a("p",[e._v("Celo uses "),a("RouterLink",{attrs:{to:"/docs/celo-codebase/protocol/identity/metadata.html"}},[e._v("Metadata")]),e._v(" to allow accounts to make certain claims without having to do so on-chain. Users can use any authorized signer address to make claims on behalf of the registered Account. For convenience this guide uses the "),a("code",[e._v("CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v(", but any authorized signer will work. To complete the metadata process, we have to claim which URL users can request attestations from.")],1),e._v(" "),a("p",[e._v("Run the following commands on your local machine. This section uses several environment variables defined during the validator setup.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On your local machine")]),e._v("\ncelocli account:create-metadata ./metadata.json --from "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_VALIDATOR_RG_ADDRESS")]),e._v("\n")])])]),a("p",[e._v("The "),a("code",[e._v("CELO_ATTESTATION_SERVICE_URL")]),e._v(" variable stores the URL to access the Attestation Service deployed. In the following command we specify the URL where this Attestation Service is:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On your local machine")]),e._v("\ncelocli account:claim-attestation-service-url ./metadata.json --url "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SERVICE_URL")]),e._v(" --from "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v("\n")])])]),a("p",[e._v("You should now host your metadata somewhere reachable via HTTP. You can use a service like "),a("a",{attrs:{href:"https://gist.github.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("gist.github.com"),a("OutboundLink")],1),e._v(". Create a gist with the contents of the file and then click on the "),a("code",[e._v("Raw")]),e._v(" button to receive the permalink to the machine-readable file.")]),e._v(" "),a("p",[e._v("Now we can register this url for others to see. To do this, we must have the "),a("code",[e._v("beneficiary")]),e._v(" address of the "),a("code",[e._v("ReleaseGold")]),e._v(" contract ("),a("code",[e._v("CELO_VALIDATOR_ADDRESS")]),e._v(") unlocked.")]),e._v(" "),a("p",[e._v("(Note: If you used a Ledger to create the "),a("code",[e._v("beneficiary")]),e._v(" address, add the "),a("code",[e._v("--useLedger")]),e._v(" flag and possibly the "),a("code",[e._v("--ledgerAddresses=N")]),e._v(" flag to the below command. The latter flag will have the ledger check N number of addresses, e.g. "),a("code",[e._v("--ledgerAddresses=5")]),e._v(" would have the Ledger check 5 addresses. Don't forget to confirm the transaction on your Ledger after initiating it via the CLI.)")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On your local machine")]),e._v("\ncelocli releasegold:set-account --contract "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_VALIDATOR_RG_ADDRESS")]),e._v(" --property metaURL --value "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("METADATA_URL"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("If everything goes well users should be able to see your claims by running:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On your local machine")]),e._v("\ncelocli account:get-metadata "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_VALIDATOR_RG_ADDRESS")]),e._v("\n")])])]),a("h3",{attrs:{id:"delivery-receipts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delivery-receipts"}},[e._v("#")]),e._v(" Delivery Receipts")]),e._v(" "),a("p",[e._v("Attestation Services supports Twilio and Nexmo delivery receipts so that these services can callback to provide delivery information. This triggers retries as needed, even between providers, and enables delivery success metrics to be logged.")]),e._v(" "),a("p",[e._v("Nexmo requires manual configuration to enable delivery receipts. If you have not configured a "),a("a",{attrs:{href:"https://dashboard.nexmo.com/applications/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexmo application"),a("OutboundLink")],1),e._v(", go to "),a("a",{attrs:{href:"https://dashboard.nexmo.com/settings",target:"_blank",rel:"noopener noreferrer"}},[e._v("Settings"),a("OutboundLink")],1),e._v(", and under "),a("code",[e._v("Delivery Receipts")]),e._v(", enter the external URL of your Attestation Service appended by "),a("code",[e._v("/delivery_status_nexmo")]),e._v(" -- for example "),a("code",[e._v("http://1.2.3.4:80/delivery_status_nexmo")]),e._v(". This should correspond to the URL printed when Attestation Service is started.")]),e._v(" "),a("p",[e._v("If you have configured "),a("a",{attrs:{href:"https://dashboard.nexmo.com/applications/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexmo applications"),a("OutboundLink")],1),e._v(", open the matching application, click "),a("code",[e._v("Edit")]),e._v(", then enter this value as the "),a("code",[e._v("Status URL")]),e._v(" (you may also be required to enter an "),a("code",[e._v("Inbound URL")]),e._v(", though it will be unused).")]),e._v(" "),a("p",[e._v("There is no configuration necessary to enable Twilio delivery receipts. The Attestation Service uses the URL in the validator metadata, provided that "),a("code",[e._v("VERIFY_CONFIG_ON_STARTUP")]),e._v(" is enabled. The URL for callbacks can always be specified with the "),a("code",[e._v("EXTERNAL_CALLBACK_HOSTPORT")]),e._v(" configuration option. The service appends "),a("code",[e._v("/delivery_status_twilio")]),e._v(" on to the URL, and supplies that to Twilio through its API.")]),e._v(" "),a("p",[e._v("If you are using a load balancer in front of Attestation Service with a URL based routing configuration, be careful to prevent these routes being filtered.")]),e._v(" "),a("h3",{attrs:{id:"test-endpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-endpoint"}},[e._v("#")]),e._v(" Test Endpoint")]),e._v(" "),a("p",[e._v("Attestation Service provides a test endpoint.")]),e._v(" "),a("p",[e._v("You can run the following command ("),a("RouterLink",{attrs:{to:"/docs/command-line-interface/identity.html#test-attestation-service"}},[e._v("reference")]),e._v(") to test an Attestation Service and send an SMS to yourself:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("celocli identity:test-attestation-service --from "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ATTESTATION_SIGNER_ADDRESS")]),e._v(" --phoneNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YOUR-PHONE-NUMBER-E164-FORMAT"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --message "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YOUR_MESSAGE"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("You need the attestation signer key available and unlocked on your local machine.")]),e._v(" "),a("p",[e._v("Note that this does not use an identical code path to real attestations (since those require specific on-chain state) so this endpoint should not be used in place of monitoring logs and metrics.")]),e._v(" "),a("p",[e._v("You should receive an SMS, and the Attestation Service should log messages indicating that the message was "),a("code",[e._v("Sent")]),e._v(" and then, if delivery reports can be made successfully, "),a("code",[e._v("Delivered")]),e._v(". Depending on the provider, you may receive several callbacks as the message progresses through the network.")]),e._v(" "),a("p",[e._v("If this works then your attestation service should be successfully deployed!")]),e._v(" "),a("h2",{attrs:{id:"monitoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitoring"}},[e._v("#")]),e._v(" Monitoring")]),e._v(" "),a("p",[e._v("It is important to monitor the Attestation Service and also "),a("RouterLink",{attrs:{to:"/docs/operations-manual/monitoring.html"}},[e._v("monitor the full node")]),e._v(" that it depends on.")],1),e._v(" "),a("h3",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" Logging")]),e._v(" "),a("p",[e._v("The Attestation Service provides JSON-format structured logs.")]),e._v(" "),a("h3",{attrs:{id:"healthcheck"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck"}},[e._v("#")]),e._v(" Healthcheck")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("/healthz")]),e._v(" endpoint will respond with status "),a("code",[e._v("200")]),e._v(" when all of the following are true: the attestation signer key is available and unlocked, the node is not syncing, the latest block is recent, and the database is online. Otherwise it will respond with status "),a("code",[e._v("500")]),e._v(".")]),e._v(" "),a("p",[e._v("Attestation Service also has a "),a("code",[e._v("/status")]),e._v(" endpoint for configuration information.")]),e._v(" "),a("h3",{attrs:{id:"metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metrics"}},[e._v("#")]),e._v(" Metrics")]),e._v(" "),a("p",[e._v("Attestation Service exposes the following Prometheus format metrics at "),a("code",[e._v("/metrics")]),e._v(" for attestations made. Please note that metrics are per instance.")]),e._v(" "),a("p",[e._v("Please note that monitoring endpoints including metrics are exposed as a path on the usual host port. This means they are public by default. If you want metrics to be internal only, you will need to configure a load balancer appropriately.")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("attestation_requests_total")]),e._v(": Counter for the number of attestation requests.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_already_sent")]),e._v(": Counter for the number of attestation requests that were received but dropped because the local database records that they have already been completed.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_wrong_issuer")]),e._v(": Counter for the number of attestation requests that were received but dropped because they specified the incorrect validator.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_without_incomplete_attestation")]),e._v(": Counter for the number of attestation requests that were received but when querying the blockchain no matching incomplete attestation could be found.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_valid")]),e._v(": Counter for the number of requests received that are for the correct issuer and an incomplete attestation exists.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_attestation_errors")]),e._v(": Counter for the number of requests for which producing the attestation failed. This could be due to phone number or salt that does not match the hash, or the attestation was recorded fewer than 4 blocks ago.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_unable_to_serve")]),e._v(": Counters for the number of requests that could not be served because no SMS provider was configured for the phone number in the request. Label "),a("code",[e._v("country")]),e._v(" breaks down the count by country code.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_sent_sms")]),e._v(": Counter for the number of SMS successfully sent.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_failed_to_send_sms")]),e._v(": Counter for the number of SMS that failed to send.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_believed_delivered_sms")]),e._v(": Counter for the number of SMS that were eventually delivered, or believed to be delivered after a timeout without hearing about delivery failure.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_requests_unexpected_errors")]),e._v(": Counter for the number of unexpected errors.")])])]),e._v(" "),a("p",[e._v("The following metrics track each delivery attempt. Each client request for an attestation may result in several delivery attempts, at most "),a("code",[e._v("MAX_PROVIDER_RETRIES")]),e._v(" times the number of providers configured for that country:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("attestation_attempts_delivery_status")]),e._v(": Counter for delivery attempts made. Label "),a("code",[e._v("country")]),e._v(" breaks down the count by country code. Label "),a("code",[e._v("provider")]),e._v(" identifies the provider. Label "),a("code",[e._v("status")]),e._v(" identifies the outcome:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("Created")]),e._v(": The request was accepted by the provider.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Queued")]),e._v(": The SMS is buffered or queued, but still in flight.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Upstream")]),e._v(": The SMS was passed to an upstream carrier.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Delivered")]),e._v(": A final delivery receipt was received indicating the SMS was succesfully delivered.")])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("attestation_attempts_delivery_error_codes")]),e._v(": Counter for delivery attempts made. Label "),a("code",[e._v("country")]),e._v(" breaks down the count by country code. Label "),a("code",[e._v("provider")]),e._v(" identifies the provider. Label "),a("code",[e._v("code")]),e._v(" identifies the provider-specific error codes: see "),a("a",{attrs:{href:"https://www.twilio.com/docs/api/errors#3-anchor",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twilio error codes"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://developer.nexmo.com/messaging/sms/guides/delivery-receipts#dlr-error-codes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexmo error codes"),a("OutboundLink")],1),e._v(" for more details.")])])]),e._v(" "),a("p",[e._v("Administrative metrics:")]),e._v(" "),a("ul",[a("li",[e._v("The "),a("code",[e._v("attestation_provider_balance")]),e._v(" tracks the value of the balance of accounts at supported providers.  Label "),a("code",[e._v("provider")]),e._v(" identifies the provider. This is currently only supported for Nexmo, and is off by default but can be enabled by setting "),a("code",[e._v("NEXMO_ACCOUNT_BALANCE_METRIC")]),e._v(". The metric is populated as a value in the account currency, e.g USD, and only once a successful SMS has been delivered by that provider.")])]),e._v(" "),a("h3",{attrs:{id:"blockchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockchain"}},[e._v("#")]),e._v(" Blockchain")]),e._v(" "),a("p",[e._v("The number of requested and entirely completed attestations is in effect recorded on the blockchain. The values can be seen by entering the Validator's address on the "),a("a",{attrs:{href:"https://explorer.celo.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Celo Explorer"),a("OutboundLink")],1),e._v(" and clicking the 'Celo Info' tab.")])])}),[],!1,null,null,null);t.default=o.exports}}]);