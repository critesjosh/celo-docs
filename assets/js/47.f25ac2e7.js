(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{396:function(e,t,n){"use strict";n.r(t);var r=n(42),i=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"encrypted-payment-comments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encrypted-payment-comments"}},[e._v("#")]),e._v(" Encrypted Payment Comments")]),e._v(" "),n("h3",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" "),n("strong",[e._v("Overview")])]),e._v(" "),n("p",[e._v("As part of Celo’s identity protocol, a public encryption key is stored along with a user’s address in the "),n("code",[e._v("Attestations")]),e._v(" contract. Both the address key pair and the encryption key pair are derived from the backup phrase. When sending a transaction the encryption key of the recipient is retrieved when getting his or her address. The comment is then encrypted using a 128 bit hybrid encryption scheme (ECDH on secp256k1 with AES-128-CTR). This system ensures that comments can only be read by the sending and receiving parties and that messages will be recovered when restoring a wallet from its backup phrase.")]),e._v(" "),n("h3",{attrs:{id:"comment-encryption-technical-details"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comment-encryption-technical-details"}},[e._v("#")]),e._v(" "),n("strong",[e._v("Comment Encryption Technical Details")])]),e._v(" "),n("p",[e._v("A 128 bit randomly generated session key, sk, is generated and used to symmetrically encrypt the comment. sk is asymmetrically encrypted to the sender and to the recipient.")]),e._v(" "),n("p",[e._v("‌"),n("code",[e._v("Encrypted = ECIES(sk, to=pubSelf) | ECIES(sk, to=pubOther) | AES(ke=sk, km=sk, comment)")])]),e._v(" "),n("h4",{attrs:{id:"‌symmetric-encryption-aes-128-ctr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#‌symmetric-encryption-aes-128-ctr"}},[e._v("#")]),e._v(" ‌"),n("strong",[e._v("Symmetric Encryption (AES-128-CTR)")])]),e._v(" "),n("ul",[n("li",[e._v("Takes encryption key, ke, and MAC key, km, and the data to encrypt, plaintext")]),e._v(" "),n("li",[e._v("Cipher: AES-128-CTR using a randomly generated iv")]),e._v(" "),n("li",[e._v("Authenticate iv | ciphertext using HMAC with SHA-256 and km")]),e._v(" "),n("li",[e._v("Return iv | ciphertext | mac")])]),e._v(" "),n("h4",{attrs:{id:"asymmetric-encryption-ecies"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#asymmetric-encryption-ecies"}},[e._v("#")]),e._v(" "),n("strong",[e._v("Asymmetric Encryption (ECIES)")])]),e._v(" "),n("ol",[n("li",[e._v("Takes data to encrypt, plaintext, and the public key of the recipient, pubKeyTo")]),e._v(" "),n("li",[e._v("Generate an ephemeral keypair, ephemPubKey and ephemPrivKey")]),e._v(" "),n("li",[e._v("Derive 32 bytes of key material, k, from ECDH between ephemPrivKey and pubKeyTousing ConcatKDF (specified as NIST 800-56C Rev 1 One Step KDF) with SHA-256 for H(x)")]),e._v(" "),n("li",[e._v("The encryption key, ke, is the first 128 bits of k")]),e._v(" "),n("li",[e._v("The MAC key, km, is SHA-256 of the second 128 bits of k")]),e._v(" "),n("li",[e._v("Encrypt the plaintext symmetrically with AES-128-CTR using ke, km, and a random iv")]),e._v(" "),n("li",[e._v("Return ephemPubKey | AES-128-CTR-HMAC(ke, km, plaintext) where the public key needs to be uncompressed (current limitation with decrypt).")])])])}),[],!1,null,null,null);t.default=i.exports}}]);