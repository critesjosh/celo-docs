(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{700:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"hello-contracts-writing-and-deploying-celo-contracts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hello-contracts-writing-and-deploying-celo-contracts"}},[t._v("#")]),t._v(" Hello Contracts: writing and deploying Celo contracts")]),t._v(" "),e("p",[t._v("This guide walks you through the basics of how to deploy your own smart contracts on Celo networks. As Celo is fully EVM compliant, we inherit the rich developer ecosystem and tooling of the Ethereum community. We will be deploying a typical hello world smart contract onto the Alfajores testnet with typical Ethereum tools like Truffle and Ganache.")]),t._v(" "),e("h2",{attrs:{id:"setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[t._v("#")]),t._v(" Setup")]),t._v(" "),e("p",[t._v("This guide assumes that you have a basic Node/"),e("a",{attrs:{href:"https://www.npmjs.com/get-npm",target:"_blank",rel:"noopener noreferrer"}},[t._v("NPM"),e("OutboundLink")],1),t._v(" setup. If so, you can install truffle with:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install -g truffle\n")])])]),e("p",[t._v("In your desired project folder, intiialize a new truffle project:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("truffle init\n")])])]),e("h2",{attrs:{id:"hello-world"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[t._v("#")]),t._v(" Hello World!")]),t._v(" "),e("p",[t._v("Let's add a contract with")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("truffle create contract HelloWorld\n")])])]),e("p",[t._v("Our contract will just store a name for now:")]),t._v(" "),e("div",{staticClass:"language-solidity extra-class"},[e("pre",{pre:!0,attrs:{class:"language-solidity"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pragma")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("solidity")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),e("span",{pre:!0,attrs:{class:"token version number"}},[t._v("0.5.0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token version number"}},[t._v("0.7.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("contract")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorld")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Celo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("memory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("calldata")]),t._v(" newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("external")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"deploy-locally"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploy-locally"}},[t._v("#")]),t._v(" Deploy locally")]),t._v(" "),e("p",[t._v("Let's create a migration to deploy the contract. For that, we need to create a file in the "),e("code",[t._v("migrations")]),t._v(" folder named "),e("code",[t._v("2_deploy_helloworld.js")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" HelloWorld "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" artifacts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HelloWorld'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmodule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("deployer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  deployer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("deploy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HelloWorld"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("To be able to actually deploy it though, we need a blockchain. For local development and testing, you can use our fork of ganache:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install -g @celo/ganache-cli\n")])])]),e("p",[t._v("And then start ganache with:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ganache-cli --port 7545\n")])])]),e("p",[t._v("In your "),e("code",[t._v("truffle-config.js")]),t._v(", you'll want to add your local test network under networks:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  networks: {\n    test: {\n      host: "127.0.0.1",\n      port: 7545,\n      network_id: "*"\n    }\n  }\n')])])]),e("p",[t._v("Then you can deploy your contract to your local network first:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("truffle migrate --network test\n")])])]),e("p",[t._v("You can interact with your contract by running the truffle console:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("truffle console --network test\ntruffle(test)> contract = await HelloWorld.deployed()\nundefined\ntruffle(test)> contract.getName()\n'Celo'\ntruffle(test)> contract.setName('MyName')\n{ tx:\n...\ntruffle(test)> contract.getName()\n'MyName'\n")])])]),e("h2",{attrs:{id:"deploy-to-alfajores"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploy-to-alfajores"}},[t._v("#")]),t._v(" Deploy to Alfajores")]),t._v(" "),e("p",[t._v("When you are ready to deploy your contract to Alfajores, you'll need a Celo client connected to the testnet. We'll run a node somewhat similarly to the "),e("a",{attrs:{href:"/getting-started/baklava-testnet/running-a-full-node"}},[t._v("Instructions of running a full node on Baklava")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CELO_IMAGE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("us.gcr.io/celo-org/celo-node:alfajores\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("NETWORK_ID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("44787")]),t._v("\n")])])]),e("h3",{attrs:{id:"pull-the-celo-docker-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull-the-celo-docker-image"}},[t._v("#")]),t._v(" Pull the Celo Docker image")]),t._v(" "),e("p",[t._v("We're going to use a Docker image containing the Celo node software in this tutorial.")]),t._v(" "),e("p",[t._v("If you are re-running these instructions, the Celo Docker image may have been updated, and it's important to get the latest version.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker pull "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CELO_IMAGE")]),t._v("\n")])])]),e("h3",{attrs:{id:"set-up-a-data-directory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-up-a-data-directory"}},[t._v("#")]),t._v(" Set up a data directory")]),t._v(" "),e("p",[t._v("First, create the directory that will store your node's configuration and its copy of the blockchain. This directory can be named anything you'd like, but here's a default you can use. The commands below create a directory and then navigate into it. The rest of the steps assume you are running the commands from inside this directory.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" celo-data-dir\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" celo-data-dir\n")])])]),e("h3",{attrs:{id:"create-an-account-and-get-its-address"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-an-account-and-get-its-address"}},[t._v("#")]),t._v(" Create an account and get its address")]),t._v(" "),e("p",[t._v("In this step, you'll create an account on the network. If you've already done this and have an account address, you can skip this and move on to configuring your node.")]),t._v(" "),e("p",[t._v("Run the command to create a new account:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker run -v "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PWD")]),t._v(":/root/.celo --rm -it "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CELO_IMAGE")]),t._v(" account new\n")])])]),e("p",[t._v("It will prompt you for a passphrase, ask you to confirm it, and then will output your account address: "),e("code",[t._v("Address: {<YOUR-ACCOUNT-ADDRESS>}")])]),t._v(" "),e("p",[t._v("Save this address to an environment variables, so that you can reference it below (don't include the braces):")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CELO_ACCOUNT_ADDRESS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("YOUR-ACCOUNT-ADDRESS"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[e("em",[t._v("Note: this environment variable will only persist while you have this terminal window open. If you want this environment variable to be available in the future, you can add it to your `~/.bash_profile")])]),t._v(" "),e("h3",{attrs:{id:"configure-the-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-node"}},[t._v("#")]),t._v(" Configure the node")]),t._v(" "),e("p",[t._v("The genesis block is the first block in the chain, and is specific to each network. This command gets the "),e("code",[t._v("genesis.json")]),t._v(" file for baklava and uses it to initialize your nodes' data directory.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker run -v "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PWD")]),t._v(":/root/.celo --rm "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CELO_IMAGE")]),t._v(" init /celo/genesis.json\n")])])]),e("p",[t._v("In order to allow the node to sync with the network, get the enode URLs of the bootnodes:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("BOOTNODE_ENODES")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("docker run --rm --entrypoint "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" $CELO_IMAGE /celo/bootnodes"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n")])])]),e("h3",{attrs:{id:"start-the-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-the-node"}},[t._v("#")]),t._v(" Start the node")]),t._v(" "),e("p",[t._v("This command specifies the settings needed to run the node, and gets it started.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker run --name celo-ultralight-node -d --restart unless-stopped -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8545:8545 -v "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PWD")]),t._v(":/root/.celo "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CELO_IMAGE")]),t._v(" --verbosity "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" --networkid "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NETWORK_ID")]),t._v(" --syncmode lightest --rpc --rpcaddr "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 --rpcapi eth,net,web3,debug,admin,personal --etherbase "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CELO_ACCOUNT_ADDRESS")]),t._v(" --bootnodes "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$BOOTNODE_ENODES")]),t._v(" --allow-insecure-unlock\n")])])]),e("p",[t._v("You can follow the logs with")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker logs -f celo-ultralight-node\n")])])]),e("p",[t._v("After a few seconds of syncing (with "),e("RouterLink",{attrs:{to:"/docs/celo-codebase/protocol/consensus/ultralight-sync.html"}},[t._v("Celo's ultralight sync")]),t._v("), you should be able to query the balance of your account:")],1),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" celo-ultralight-node geth attach --exec "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'eth.getBalance(\"<YOUR-ACCOUNT-ADDRESS>\")'")]),t._v("\n")])])]),e("p",[t._v("If you go to our "),e("a",{attrs:{href:"https://celo.org/build/faucet",target:"_blank",rel:"noopener noreferrer"}},[t._v("Alfajores Faucet Page"),e("OutboundLink")],1),t._v(", you should be able to faucet your account some CELO and see your balance increase with the above command.")]),t._v(" "),e("h3",{attrs:{id:"deploy-the-contract"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploy-the-contract"}},[t._v("#")]),t._v(" Deploy the contract")]),t._v(" "),e("p",[t._v("We are finally ready to deploy the contract. First let's unlock the account:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" celo-ultralight-node geth attach --exec "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'personal.unlockAccount("<YOUR-ACCOUNT-ADDRESS>", "<YOUR-ACCOUNT-PASSWORD>")\'')]),t._v("\n")])])]),e("p",[t._v("In your "),e("code",[t._v("truffle-config.js")]),t._v(" reference your node:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('alfajores: {\n  host: "127.0.0.1",\n  port: 8545,\n  network_id: 44787\n}\n')])])]),e("p",[t._v("Then you should be able to deploy your contract with:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("truffle migrate --network alfajores\n")])])]),e("p",[t._v("You can verify your contract deployment on "),e("a",{attrs:{href:"https://alfajores-blockscout.celo-testnet.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Blockscout"),e("OutboundLink")],1),t._v(", as well as interact with your new contract with the "),e("code",[t._v("truffle console --network alfajores")]),t._v(". Congratulations!")]),t._v(" "),e("p",[t._v("As you can see, all the goodies from Ethereum apply to Celo, so virtually all tutorials and other content should be easily translatable to Celo. Check out "),e("a",{attrs:{href:"https://celo.org/build",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://celo.org/build"),e("OutboundLink")],1),t._v(" for more resources!")])])}),[],!1,null,null,null);a.default=n.exports}}]);