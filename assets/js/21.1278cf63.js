(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{370:function(a,t,e){"use strict";e.r(t);var s=e(42),o=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"metadata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#metadata"}},[a._v("#")]),a._v(" Metadata")]),a._v(" "),e("p",[a._v("The Celo protocol's "),e("strong",[a._v("metadata and claims")]),a._v(" feature makes it possible to connect on-chain with off-chain identities.")]),a._v(" "),e("p",[a._v("Use cases include:")]),a._v(" "),e("ul",[e("li",[a._v("Tools want to present public metadata supplied by a validator or validator group as part of a list of candidate groups, or a list of current elected validators.")]),a._v(" "),e("li",[a._v("Governance Explorer UIs may want to present public metadata about the creators of governance proposals")]),a._v(" "),e("li",[a._v("The Celo Foundation receives notice of a security vulnerability and wants to contact elected validators to facilitate them to make a decision on applying a patch.")]),a._v(" "),e("li",[a._v("A DApp makes a request to the Celo Wallet for account information or to sign a transaction. The Celo Wallet should provide information about the DApp to allow the user to make a decision whether to sign the transaction or not.")])]),a._v(" "),e("p",[a._v("Furthermore, these tools may want to include user chosen information such as names or profile pictures that would be expensive to store on-chain. For this purpose, the Celo protocol supports "),e("strong",[a._v("metadata")]),a._v(" that allows accounts to make both verifiable as well as non-verifiable claims. The design is described in "),e("a",{attrs:{href:"https://github.com/celo-org/CIPs/pull/4",target:"_blank",rel:"noopener noreferrer"}},[a._v("CIP3"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("p",[a._v("On the "),e("code",[a._v("Accounts")]),a._v(" smart contract, any account can register a URL under which their metadata file is available. The metadata file contains an unordered list of claims, signed by the account.")]),a._v(" "),e("h2",{attrs:{id:"types-of-claim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#types-of-claim"}},[a._v("#")]),a._v(" Types of Claim")]),a._v(" "),e("p",[a._v("ContractKit currently supports the following types of claim:")]),a._v(" "),e("ul",[e("li",[e("p",[e("strong",[a._v("Name Claim")]),a._v(" - An account can claim a human-readable name. This claim is not verifiable.")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Attestation Service URL Claim")]),a._v(" - For the "),e("RouterLink",{attrs:{to:"/docs/celo-codebase/protocol/"}},[a._v("lightweight identity layer")]),a._v(", validators can make a claim under which their Attestation Service is reachable to provide attestations. This claim is not verifiable.")],1)]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Keybase User Claim")]),a._v(" - Accounts can make claims on "),e("a",{attrs:{href:"https://keybase.io",target:"_blank",rel:"noopener noreferrer"}},[a._v("Keybase"),e("OutboundLink")],1),a._v(" usernames. This claim is verifiable by signing a message with the account and hosting it on the publicly accessible path of the Keybase file system.")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Domain Claim")]),a._v(" - Accounts can make claims on domain names. This claim is verifiable by signing a message with the account and embedding it in a "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/TXT_record",target:"_blank",rel:"noopener noreferrer"}},[a._v("TXT record"),e("OutboundLink")],1),a._v(".")])])]),a._v(" "),e("p",[a._v("In the future ContractKit may support other types of claim, including:")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("Twitter User Claim")]),a._v(" - Accounts can make claims on "),e("a",{attrs:{href:"https://twitter.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Twitter"),e("OutboundLink")],1),a._v(" usernames. This claim is verifiable by signing a message with the account and posting it as a tweet. Any client can verify the claim with a reference to the tweet in the claim.")])]),a._v(" "),e("h2",{attrs:{id:"handling-metadata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#handling-metadata"}},[a._v("#")]),a._v(" Handling Metadata")]),a._v(" "),e("p",[a._v("You can interact with metadata files easily through the "),e("RouterLink",{attrs:{to:"/docs/command-line-interface/account.html"}},[a._v("CLI")]),a._v(", or in your own scripts, tools or DApps via "),e("RouterLink",{attrs:{to:"/docs/developer-resources/contractkit/"}},[a._v("ContractKit")]),a._v(". Most commands require a node being available under "),e("code",[a._v("http://localhost:8545")]),a._v(" to make view calls, and to modify metadata files, you'll need the relevant account to be unlocked to sign the files.")],1),a._v(" "),e("p",[a._v("You can create an empty metadata file with:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("celocli account:create-metadata ./metadata.json --from "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ACCOUNT_ADDRESS")]),a._v("\n")])])]),e("p",[a._v("You can add claims with various commands:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("celocli account:claim-attestation-service-url ./metadata.json --from "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ACCOUNT_ADDRESS")]),a._v(" --url "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ATTESTATION_SERVICE_URL")]),a._v("\n")])])]),e("p",[a._v("You can display the claims in your file and their status with:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("celocli account:show-metadata ./metadata.json\n")])])]),e("p",[a._v("Once you are satisfied with your claims, you can upload your file to your own web site or a site that will host the file (for example, "),e("a",{attrs:{href:"https://gist.github.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://gist.github.com"),e("OutboundLink")],1),a._v(") and then register it with the "),e("code",[a._v("Accounts")]),a._v(" smart contract by running:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("celocli account:register-metadata --url "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$METADATA_URL")]),a._v(" --from "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ACCOUNT_ADDRESS")]),a._v("\n")])])]),e("p",[a._v("Then, anyone can lookup your claims and verify them by running:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("celocli account:get-metadata "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ACCOUNT_ADDRESS")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);