(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{709:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"running-a-full-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-a-full-node"}},[e._v("#")]),e._v(" Running a Full Node")]),e._v(" "),a("p",[e._v("This section explains how to get a full node running on the "),a("RouterLink",{attrs:{to:"/docs/getting-started/mainnet.html"}},[e._v("Mainnet Network")]),e._v(", using a Docker image that was built for this purpose.")],1),e._v(" "),a("p",[e._v("Full nodes play a special purpose in the Celo ecosystem, acting as a bridge between the mobile wallets (running as light clients) and the validator nodes. To make sure that full nodes are rewarded for this service, the Celo protocol includes "),a("RouterLink",{attrs:{to:"/docs/celo-codebase/protocol/transactions/full-node-incentives.html"}},[e._v("full node incentives")]),e._v(".")],1),e._v(" "),a("p",[e._v("When a light client sends transactions, they may include a gateway fee to be paid to the node that gossips transactions to the other full nodes and validators.")]),e._v(" "),a("p",[e._v("For this reason, despite the fact that Celo uses a proof-of-stake protocol, users can earn cryptocurrency without first having to own any, simply by running a full node.")]),e._v(" "),a("p",[e._v('{% hint style="warning" %}\nFull node incentives have not been enabled yet because the mechanism for negotiating a gateway fee is still under development. Currently, light clients are configured to send a gateway fee of 0 and full nodes are set to accept a minimum gateway fee of 0.\n{% endhint %}')]),e._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("You have Docker installed.")]),e._v(" If you donâ€™t have it already, follow the instructions here: "),a("a",{attrs:{href:"https://www.docker.com/get-started",target:"_blank",rel:"noopener noreferrer"}},[e._v("Get Started with Docker"),a("OutboundLink")],1),e._v(". It will involve creating or signing in with a Docker account, downloading a desktop app, and then launching the app to be able to use the Docker CLI. If you are running on a Linux server, follow the instructions for your distro "),a("a",{attrs:{href:"https://docs.docker.com/install/#server",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(". You may be required to run Docker with "),a("code",[e._v("sudo")]),e._v(" depending on your installation environment.")])]),e._v(" "),a("p",[e._v('{% hint style="info" %}\nCode you\'ll see on this page is bash commands and their output.')]),e._v(" "),a("p",[e._v("When you see text in angle brackets <>, replace them and the text inside with your own value of what it refers to. Don't include the <> in the command.\n{% endhint %}")]),e._v(" "),a("h2",{attrs:{id:"celo-networks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#celo-networks"}},[e._v("#")]),e._v(" Celo Networks")]),e._v(" "),a("p",[e._v("First we are going to setup the environment variables required for the "),a("code",[e._v("mainnet")]),e._v(" network. Run:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CELO_IMAGE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("us.gcr.io/celo-org/celo-node:mainnet\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("NETWORK_ID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("42220")]),e._v("\n")])])]),a("h2",{attrs:{id:"pull-the-celo-docker-image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-the-celo-docker-image"}},[e._v("#")]),e._v(" Pull the Celo Docker image")]),e._v(" "),a("p",[e._v("We're going to use a Docker image containing the Celo node software in this tutorial.")]),e._v(" "),a("p",[e._v("If you are re-running these instructions, the Celo Docker image may have been updated, and it's important to get the latest version.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker pull "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v("\n")])])]),a("h2",{attrs:{id:"set-up-a-data-directory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-up-a-data-directory"}},[e._v("#")]),e._v(" Set up a data directory")]),e._v(" "),a("p",[e._v("First, create the directory that will store your node's configuration and its copy of the blockchain. This directory can be named anything you'd like, but here's a default you can use. The commands below create a directory and then navigate into it. The rest of the steps assume you are running the commands from inside this directory.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" celo-data-dir\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" celo-data-dir\n")])])]),a("h2",{attrs:{id:"create-an-account-and-get-its-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-an-account-and-get-its-address"}},[e._v("#")]),e._v(" Create an account and get its address")]),e._v(" "),a("p",[e._v("In this step, you'll create an account on the network. If you've already done this and have an account address, you can skip this and move on to configuring your node.")]),e._v(" "),a("p",[e._v("Run the command to create a new account:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker run -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo --rm -it "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" account new\n")])])]),a("p",[e._v("It will prompt you for a passphrase, ask you to confirm it, and then will output your account address: "),a("code",[e._v("Public address of the key: <YOUR-ACCOUNT-ADDRESS>")])]),e._v(" "),a("p",[e._v("Save this address to an environment variables, so that you can reference it below (don't include the braces):")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CELO_ACCOUNT_ADDRESS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YOUR-ACCOUNT-ADDRESS"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v('{% hint style="info" %}\nThis environment variable will only persist while you have this terminal window open. If you want this environment variable to be available in the future, you can add it to your '),a("code",[e._v("~/.bash_profile")]),e._v("\n{% endhint %}")]),e._v(" "),a("h2",{attrs:{id:"configure-the-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-node"}},[e._v("#")]),e._v(" Configure the node")]),e._v(" "),a("p",[e._v("The genesis block is the first block in the chain, and is specific to each network. This command gets the "),a("code",[e._v("genesis.json")]),e._v(" file for mainnet and uses it to initialize your nodes' data directory.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker run --rm -it -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" init /celo/genesis.json\n")])])]),a("p",[e._v("In order to allow the node to sync with the network, get the enode URLs of the bootnodes:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BOOTNODE_ENODES")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("docker run --rm --entrypoint "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" $CELO_IMAGE /celo/bootnodes"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),a("h2",{attrs:{id:"start-the-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-the-node"}},[e._v("#")]),e._v(" Start the node")]),e._v(" "),a("p",[e._v("This command specifies the settings needed to run the node, and gets it started.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker run --name celo-fullnode -d --restart unless-stopped -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:8545:8545 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:8546:8546 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30303")]),e._v(":30303 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30303")]),e._v(":30303/udp -v "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v(":/root/.celo "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_IMAGE")]),e._v(" --verbosity "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v(" --networkid "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$NETWORK_ID")]),e._v(" --syncmode full --rpc --rpcaddr "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v(".0.0 --rpcapi eth,net,web3,debug,admin,personal --light.serve "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("90")]),e._v(" --light.maxpeers "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v(" --maxpeers "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1100")]),e._v(" --etherbase "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CELO_ACCOUNT_ADDRESS")]),e._v(" --bootnodes "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$BOOTNODE_ENODES")]),e._v(" --nousb\n")])])]),a("p",[e._v("You'll start seeing some output. After a few minutes, you should see lines that look like this. This means your node has started syncing with the network and is receiving blocks.")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("INFO [07-16|14:04:24.924] Imported new chain segment               blocks=139  txs=319 mgas=61.987 elapsed=8.085s mgasps=7.666 number=406  hash=9acf16â€¦4fddc8 age=6h58m44s cache=1.51mB\nINFO [07-16|14:04:32.928] Imported new chain segment               blocks=303  txs=179 mgas=21.837 elapsed=8.004s mgasps=2.728 number=709  hash=8de06aâ€¦77bb92 age=6h33m37s cache=1.77mB\nINFO [07-16|14:04:40.918] Imported new chain segment               blocks=411  txs=0   mgas=0.000  elapsed=8.023s mgasps=0.000 number=1120 hash=3db22aâ€¦9fa95a age=5h59m30s cache=1.92mB\nINFO [07-16|14:04:48.941] Imported new chain segment               blocks=335  txs=0   mgas=0.000  elapsed=8.023s mgasps=0.000 number=1455 hash=7eb3f8â€¦32ebf0 age=5h31m43s cache=2.09mB\nINFO [07-16|14:04:56.944] Imported new chain segment               blocks=472  txs=0   mgas=0.000  elapsed=8.003s mgasps=0.000 number=1927 hash=4f1010â€¦1414c1 age=4h52m31s cache=2.34mB\n")])])]),a("p",[e._v("You will have fully synced with the network once you have pulled the latest block number, which you can lookup by visiting the "),a("a",{attrs:{href:"https://stats.celo.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Network Stats"),a("OutboundLink")],1),e._v(" or [Block Explorer]](https://explorer.celo.org/) pages.")]),e._v(" "),a("p",[e._v('{% hint style="danger" %}\n'),a("strong",[e._v("Security")]),e._v(": The command line above includes the parameter "),a("code",[e._v("--rpcaddr 0.0.0.0")]),e._v(" which makes the Celo Blockchain software listen for incoming RPC requests on all network adaptors. Exercise extreme caution in doing this when running outside Docker, as it means that any unlocked accounts and their funds may be accessed from other machines on the Internet. In the context of running a Docker container on your local machine, this together with the "),a("code",[e._v("docker -p")]),e._v(" flags allows you to make RPC calls from outside the container, i.e from your local host, but not from outside your machine. Read more about "),a("a",{attrs:{href:"https://docs.docker.com/network/network-tutorial-standalone/#use-user-defined-bridge-networks",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Networking"),a("OutboundLink")],1),e._v(" here.\n{% endhint %}")]),e._v(" "),a("h2",{attrs:{id:"command-line-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[e._v("#")]),e._v(" Command Line Interface")]),e._v(" "),a("p",[e._v("Once the full node is running, it can serve the "),a("RouterLink",{attrs:{to:"/docs/command-line-interface/introduction.html"}},[e._v("Command Line Interface")]),e._v(" tool "),a("code",[e._v("celocli")]),e._v(". For example:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -g @celo/celocli\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n$ celocli node:synced\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n$ celocli account:new\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),a("h2",{attrs:{id:"light-client-serving"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#light-client-serving"}},[e._v("#")]),e._v(" Light Client Serving")]),e._v(" "),a("p",[e._v("Light clients may connect to you as people run the "),a("RouterLink",{attrs:{to:"/docs/getting-started/using-the-mobile-wallet.html"}},[e._v("Celo Mobile Wallet")]),e._v(" and you will start earning gateway fees for any transactions that these users initiate, which you can read more about in the "),a("RouterLink",{attrs:{to:"/docs/celo-codebase/protocol/transactions/full-node-incentives.html"}},[e._v("Full Node Incentives")]),e._v(" document. The account that this node advertises for light clients to use for these fees is given by the "),a("code",[e._v("etherbase")]),e._v(" parameter. The "),a("code",[e._v("light.serve")]),e._v(" parameter defines the percentage of time this node should spend serving light clients. Valid values are 0-100. If this node is having trouble catching up to the current block, dropping this to a lower percentage may help. The "),a("code",[e._v("light.maxpeers")]),e._v(" and "),a("code",[e._v("maxpeers")]),e._v(" parameters set limits on the number of light clients and full node peers that the node will accept.")],1)])}),[],!1,null,null,null);t.default=n.exports}}]);